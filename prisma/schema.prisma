// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?          @db.VarChar(60)
  email         String          @unique
  bio           String?         @db.VarChar(200)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followers  Follows[] @relation("followers")
  followings Follows[] @relation("followings")

  posts    Post[]
  likes    Like[]
  comments Comment[]
  
  messages Message[]
  chats   ChatUser[]

  @@index([name])
}

model Post {
  id             String    @id @default(uuid())
  content        String?   @db.VarChar(320)
  createdAt      DateTime  @default(now())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  originalPostId String?
  originalPost   Post?     @relation("Repost", fields: [originalPostId], references: [id], onDelete: NoAction)
  reposts        Post[]    @relation("Repost")
  likes          Like[]
  comments       Comment[]

  @@unique([userId, originalPostId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(280)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follows {
  follower   User   @relation("followers", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("followings", fields: [followingId], references: [id])
  followingId String

  followedAt DateTime @default(now())

  @@id([followerId, followingId])
}


model Chat {
  id String @id @default(uuid())
  messages Message[]
  users ChatUser[]

  updatedAt DateTime @updatedAt
}

model ChatUser {
  id String @id @default(cuid())

  chatId String
  chat Chat @relation(fields: [chatId], references: [id])

  userId String
  user User @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id String @id @default(cuid())
  content String @db.VarChar(50)

  userId String
  user User @relation(fields: [userId], references: [id])
  chatId String
  chat Chat @relation(fields: [chatId], references: [id])

  createdAt DateTime @default(now())

}



model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
